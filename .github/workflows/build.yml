name: Build & Lint

on:
  push:
  pull_request:
  schedule:
    - cron: "0 8 * * *"

jobs:
  install:
    name: Install Flutter & dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Install Java
        uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - name: Install Flutter (stable)
        uses: subosito/flutter-action@v1
        with:
          channel: "stable" # or: 'dev' or 'beta'

      - name: Install dependencies
        run: flutter pub get

      - name: Run code generator(s)
        run: |
          flutter pub run intl_utils:generate
          flutter pub run build_runner build

      - name: Remove obsolete files
        run: |
          rm -rf ./.dart_tool/pub/bin/build_runner
      - name: Persist current state
        uses: actions/upload-artifact@v1
        with:
          name: source
          path: .

  lint:
    name: Lint
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Install Java
        uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - name: Install Flutter (stable)
        uses: subosito/flutter-action@v1
        with:
          channel: "stable"

      - name: Checkout source
        uses: actions/download-artifact@v1
        with:
          name: source
          path: .

      - name: Run linter
        run: flutter analyze > flutter_analyze_report.txt
        continue-on-error: true

      - name: Install ruby
        uses: actions/setup-ruby@v1
        if: github.event_name == 'pull_request'
        with:
          ruby-version: "2.6"
      - name: Install ruby gems
        run: |
          gem install bundler
          bundle install --without documentation
        if: github.event_name == 'pull_request'
      - name: Run danger on generated report
        uses: MeilCli/danger-action@v1
        if: github.event_name == 'pull_request'
        with:
          danger_file: Dangerfile
          danger_id: "danger-pr"
        env:
          DANGER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build
    needs: install
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flavor: ["sc", "brb", "n21", "open", "thr"]
      fail-fast: false
    steps:
      - name: Install Java
        uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - name: Install Flutter (stable)
        uses: subosito/flutter-action@v1
        with:
          channel: "stable"

      - name: Checkout source
        uses: actions/download-artifact@v1
        with:
          name: source
          path: .

      # The default (sc) flavor doesn't have a special main.dart-suffix
      - if: matrix.flavor == 'sc'
        run: flutter build apk --flavor=sc
      - if: matrix.flavor != 'sc'
        run: flutter build apk --target=lib/main_${{ matrix.flavor }}.dart --flavor=${{ matrix.flavor }}

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v1
        with:
          name: apk-${{ matrix.flavor }}
          path: build/app/outputs/apk/${{ matrix.flavor }}/release

  deploy-internal:
    name: Deploy internal
    needs: install
    # We have to use macOS for hardware acceleration on Android emulators
    runs-on: macos-10.15
    strategy:
      matrix:
        flavor: ["sc"]
      fail-fast: false
    steps:
      - name: Install Java 12
        uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - name: Install Flutter (stable)
        uses: subosito/flutter-action@v1
        with:
          channel: "stable"
      - name: Checkout source
        uses: actions/download-artifact@v1
        with:
          name: source
          path: .

      - name: Install Java 10
        uses: actions/setup-java@v1
        with:
          java-version: 10
      - name: Create virtual device
        run: |
          ~/Library/Android/sdk/tools/bin/sdkmanager "system-images;android-28;default;x86"
          echo no | ~/Library/Android/sdk/tools/bin/avdmanager --verbose create avd --force -n test -k "system-images;android-28;default;x86"
        env:
          JDK_JAVA_OPTIONS: "--add-modules java.xml.bind"
      - name: Install screenshots package
        run: flutter pub global activate screenshots
      - name: Take screenshots
        run: ~/.pub-cache/bin/screenshots -v -f sc
      - name: Upload screenshots as artifact
        uses: actions/upload-artifact@v1
        with:
          name: screenshots-${{ matrix.flavor }}
          path: example/android/fastlane/metadata/android
